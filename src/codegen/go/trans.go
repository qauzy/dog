package codegen_go

import (
	"bytes"
	"dog/ast"
	"fmt"
	gast "go/ast"
	"go/format"
	"go/token"
	"log"
)

func TransGo(p ast.File) (f *gast.File) {

	return transFile(p)
}

func transFile(p ast.File) (f *gast.File) {
	if pp, ok := p.(*ast.FileSingle); ok {
		f = &gast.File{}
		f.Name = gast.NewIdent(pp.Name)
		for _, c := range pp.Classes {
			cl := transClass(c, f)
			f.Decls = append(f.Decls, cl)
		}
		// 输出Go代码
		header := `// Code generated by log-gen. DO NOT EDIT.`
		buffer := bytes.NewBufferString(header)
		fset := token.NewFileSet()
		err := astToGo(buffer, f)
		if err != nil {
			return
		}
		gast.Print(fset, f)
		gast.Inspect(f, func(n gast.Node) bool {
			// Called recursively.
			gast.Print(fset, n)
			return true
		})

		fmt.Print(buffer)

	} else {
		panic("bug")
	}
	return
}

//
//
// param: c
// return:
func transClass(c ast.Class, f *gast.File) (cl *gast.GenDecl) {
	if cc, ok := c.(*ast.ClassSingle); ok {
		cl = &gast.GenDecl{
			Doc:    nil,
			TokPos: 0,
			Tok:    token.TYPE,
			Lparen: 0,
			Specs:  nil,
			Rparen: 0,
		}

		sp := &gast.TypeSpec{
			Doc:     nil,
			Name:    gast.NewIdent(cc.Name),
			Assign:  0,
			Type:    nil,
			Comment: nil,
		}
		Type := &gast.StructType{
			Struct: 0,
			Fields: &gast.FieldList{
				Opening: 0,
				List:    nil,
				Closing: 0,
			},
			Incomplete: false,
		}
		sp.Type = Type

		for _, fi := range cc.Fields {
			gfi := transField(fi)
			Type.Fields.List = append(Type.Fields.List, gfi)
		}
		for _, m := range cc.Methods {
			gmeth := transFunc(m)
			f.Decls = append(f.Decls, gmeth)
		}

		cl.Specs = append(cl.Specs, sp)

	}
	return
}
func transFunc(fi ast.Method) (fn *gast.FuncDecl) {
	if method, ok := fi.(*ast.MethodSingle); ok {
		//处理函数参数
		params := &gast.FieldList{
			Opening: 0,
			List:    nil,
			Closing: 0,
		}
		for _, p := range method.Formals {
			params.List = append(params.List, transField(p))
		}
		//处理返回值
		results := &gast.FieldList{
			Opening: 0,
			List:    nil,
			Closing: 0,
		}
		rel := &ast.FieldSingle{
			Access:  0,
			Tp:      method.RetType,
			Name:    "result",
			IsField: false,
			Stms:    nil,
		}
		//如果是void则没有返回值
		ret := transField(rel)
		if ret.Type != nil {
			results.List = append(results.List, ret)
		} else {
			results = nil
		}

		fn = &gast.FuncDecl{
			Doc:  nil,
			Recv: nil,
			Name: gast.NewIdent(method.Name),
			Type: &gast.FuncType{
				Func:    0,
				Params:  params,
				Results: results,
			},
			Body: nil,
		}

	}
	return
}

func transField(fi ast.Field) (gfi *gast.Field) {
	if field, ok := fi.(*ast.FieldSingle); ok {
		gfi = &gast.Field{
			Doc:     nil,
			Names:   []*gast.Ident{gast.NewIdent(field.Name)},
			Type:    transType(field.Tp),
			Tag:     nil,
			Comment: nil,
		}

	}
	return
}

func transType(t ast.Type) (Type gast.Expr) {
	switch v := t.(type) {
	case *ast.Void:
		return nil
	case *ast.String:
		return gast.NewIdent("string")
	case *ast.Integer:
		return gast.NewIdent("int64")
	case *ast.Int:
		return gast.NewIdent("int")
	case *ast.IntArray:
		return gast.NewIdent("[]int")
	case *ast.HashType:
		return &gast.MapType{
			Map:   0,
			Key:   transType(v.Key),
			Value: transType(v.Value),
		}
	case *ast.ListType:
		return &gast.ArrayType{
			Lbrack: 0,
			Len:    nil,
			Elt:    transType(v.Ele),
		}
	case *ast.ClassType:
		return &gast.Ident{
			NamePos: 0,
			Name:    v.Name,
			Obj:     gast.NewObj(gast.Typ, v.Name),
		}
	case *ast.Boolean:
		return gast.NewIdent("bool")
	default:
		log.Println(v.String())
		panic("impossible")
	}
}

func astToGo(dst *bytes.Buffer, node interface{}) error {
	addNewline := func() {
		err := dst.WriteByte('\n') // add newline
		if err != nil {
			log.Panicln(err)
		}
	}

	addNewline()

	err := format.Node(dst, token.NewFileSet(), node)
	if err != nil {
		return err
	}

	addNewline()

	return nil
}

// Code generated by log-gen. DO NOT EDIT.
package impl

func (this *OperationLimitTimeServiceImpl) InsertOperationStationAdInfo(Param LimitTimeAdAddDto) (Result int) {
	var headId int64 = this.SaveMainLimitTimeData(param)
	var details []LimitTimeAdAddDetail = param.GetDetails()
	var saveFlag int = this.SaveLimitTimeDetailInfo(headId, details)
	this.DelStationRedis()
	return saveFlag
}
func (this *OperationLimitTimeServiceImpl) QueryOperationCarouselInfoList(Param StationAdPageDto) (Result PageInfo) {
	var operationStationAdList []LimitTimeAdVo = make([]LimitTimeAdVo, 0)
	PageHelper.StartPage(param.GetPageNum(), param.GetPageSize())
	var limitTimeAdList []OperationLimitTimeAd = operationLimitTimeAdMapper.QueryOperationLimitTimeAdListV2(param)
	if CollectionUtils.IsEmpty(limitTimeAdList) {
		return NewPageInfo(operationStationAdList)
	}
	var pageInfo PageInfo = NewPageInfo(limitTimeAdList)
	var operationLimitTimeAdList []OperationLimitTimeAd = pageInfo.GetList()
	operationStationAdList = this.ConvertData(operationLimitTimeAdList)
	pageInfo.SetList(operationStationAdList)
	return pageInfo
}
func (this *OperationLimitTimeServiceImpl) GetOperationStationAdById(Param StationAdDetailDto) (Result LimitTimeAdVo) {
	var operationStationAd OperationLimitTimeAd = operationLimitTimeAdMapper.GetOperationStationAdById(param)
	if nil == operationStationAd {
		return nil
	}
	if StringUtils.IsEmpty(operationStationAd.GetEquipmentType()) {
		var limitTimeAdVo LimitTimeAdVo = this.GetNewLimitTimeAdInfo(operationStationAd)
		return limitTimeAdVo
	}
	var limitTimeAdVo LimitTimeAdVo = this.GetOldLimitTimeAdInfo(operationStationAd)
	return limitTimeAdVo
}
func (this *OperationLimitTimeServiceImpl) UpdateStationStatusById(Param StationAdUpdateStatusDto) {
	var operationLimitTimeAd OperationLimitTimeAd = NewOperationLimitTimeAd()
	BeanUtils.CopyProperties(param, operationLimitTimeAd)
	if CommonConstant.ONE == operationLimitTimeAd.GetAdStatus() {
		var effectiveList []OperationLimitTimeAd = operationLimitTimeAdMapper.QueryEffectiveAd(operationLimitTimeAd.GetAdStatus())
		if !CollectionUtils.IsEmpty(effectiveList) {
			for _, effectiveAd := range effectiveList {
				effectiveAd.SetAdStatus(CommonConstant.ZERO)
				effectiveAd.SetUpdatedBy(userContext.GetUser().GetUserName())
				operationLimitTimeAdMapper.UpdateStationStatusById(effectiveAd)
			}
		}
	}
	operationLimitTimeAd.SetUpdatedBy(userContext.GetUser().GetUserName())
	operationLimitTimeAdMapper.UpdateStationStatusById(operationLimitTimeAd)
	this.DelStationRedis()
}
func (this *OperationLimitTimeServiceImpl) DeleteOperationStationInfo(Param StationAdDeleteDto) (Result int) {
	var operationLimitTimeAd OperationLimitTimeAd = NewOperationLimitTimeAd()
	BeanUtils.CopyProperties(param, operationLimitTimeAd)
	operationLimitTimeAd.SetUpdatedBy(userContext.GetUser().GetUserName())
	operationLimitTimeAd.SetIsDelete(OperationConstant.ONE)
	var deleteFlag int = operationLimitTimeAdMapper.DeleteOperationStationInfo(operationLimitTimeAd)
	if deleteFlag < 1 {
		return 0
	}
	var limitTimeAdDetailList []OperationLimitTimeAdDetil = this.GetLimitTimeDetailList(param.GetId())
	if CollectionUtils.IsEmpty(limitTimeAdDetailList) {
		return 0
	}
	var detailIdList []int64 = make([]int64, 0)
	for _, operationLimitTimeAdDetil := range limitTimeAdDetailList {
		detailIdList.Add(operationLimitTimeAdDetil.GetId())
	}
	var operationDetailDeleteDto OperationDetailDeleteDto = NewOperationDetailDeleteDto()
	operationDetailDeleteDto.SetList(detailIdList)
	operationDetailDeleteDto.SetUpdatedBy(userContext.GetUser().GetUserName())
	var deleteDetailFlag int = operationLimitTimeAdDetailMapper.DeleteLimitTimeDetailInfo(operationDetailDeleteDto)
	return deleteDetailFlag
}
func (this *OperationLimitTimeServiceImpl) GetLimitTimeDetailList(Id int64) (Result []OperationLimitTimeAdDetil) {
	var list []int64 = make([]int64, 0)
	list.Add(id)
	var limitTimeAdDetailList []OperationLimitTimeAdDetil = operationLimitTimeAdDetailMapper.QueryOperationLimitTimeDetailList(list)
	return limitTimeAdDetailList
}
func (this *OperationLimitTimeServiceImpl) DeleteStationByPrimaryKey(Param StationAdDeleteDto) (Result int) {
	var operationLimitTimeAd OperationLimitTimeAd = NewOperationLimitTimeAd()
	BeanUtils.CopyProperties(param, operationLimitTimeAd)
	operationLimitTimeAd.SetUpdatedBy(userContext.GetUser().GetUserName())
	var result int = operationLimitTimeAdMapper.DeleteStationByPrimaryKey(operationLimitTimeAd)
	this.DelStationRedis()
	return result
}
func (this *OperationLimitTimeServiceImpl) UpdateOperationStationInfo(Param LimitTimeUpdateDto) (Result int) {
	var operationLimitTimeAd OperationLimitTimeAd = operationLimitTimeAdMapper.GetOperationLimitTimeAdById(param.GetId())
	var equipmentType string = operationLimitTimeAd.GetEquipmentType()
	if StringUtils.IsEmpty(equipmentType) {
		this.UpdateNewLimitTimeAd(param)
	}
	this.DelStationRedis()
	return 1
}
func (this *OperationLimitTimeServiceImpl) UpdateOldLimitTimeAd(Param LimitTimeUpdateDto) {
	var details []LimitTimeAdUpdateDetail = param.GetDetails()
	if CollectionUtils.IsEmpty(details) {
		return
	}
	this.UpdateDetailLimitTime(param, details)
	this.UpdateHeaderLimitTime(param)
}
func (this *OperationLimitTimeServiceImpl) UpdateNewLimitTimeAd(Param LimitTimeUpdateDto) {
	this.UpdateHeaderLimitTime(param)
	var limitTimeAdDetailList []OperationLimitTimeAdDetil = this.GetLimitTimeDetailList(param.GetId())
	var details []LimitTimeAdUpdateDetail = param.GetDetails()
	if (details.Size() > limitTimeAdDetailList.Size()) | (details.Size() == limitTimeAdDetailList.Size()) {
		this.UpdateDetailLimitTime(param, details)
	}
}
func (this *OperationLimitTimeServiceImpl) UpdateCutBackConfiguration(Param LimitTimeUpdateDto, LimitTimeAdDetailList []OperationLimitTimeAdDetil, Details []LimitTimeAdUpdateDetail) {
	var deleteDetailIds []int64 = this.GetRemainingId(limitTimeAdDetailList, details)
	if !CollectionUtils.IsEmpty(deleteDetailIds) {
		var operationDetailDeleteDto OperationDetailDeleteDto = NewOperationDetailDeleteDto()
		operationDetailDeleteDto.SetList(deleteDetailIds)
		operationDetailDeleteDto.SetUpdatedBy(userContext.GetUser().GetUserName())
		operationLimitTimeAdDetailMapper.DeleteLimitTimeDetailInfo(operationDetailDeleteDto)
	}
	this.UpdateDetailLimitTime(param, details)
}
func (this *OperationLimitTimeServiceImpl) GetRemainingId(LimitTimeAdDetailList []OperationLimitTimeAdDetil, Details []LimitTimeAdUpdateDetail) (Result []int64) {
	var idSet []int64 = NewSet()
	for _, OperationLimitTimeAdDetil := range limitTimeAdDetailList {
		idSet.Add(OperationLimitTimeAdDetil.GetId())
	}
	for _, detail := range details {
		if nil != detail.GetId() {
			idSet.Remove(detail.GetId())
		}
	}
	return make([]int64, 0)
}
func (this *OperationLimitTimeServiceImpl) UpdateDetailLimitTime(Param LimitTimeUpdateDto, Details []LimitTimeAdUpdateDetail) {
	for _, limitTimeAdUpdateDetail := range details {
		if nil == limitTimeAdUpdateDetail.GetLimitLinkUrl() {
			limitTimeAdUpdateDetail.SetLimitLinkUrl(CommonConstant.DEFAULT_NULL)
		}
		if nil == limitTimeAdUpdateDetail.GetLimitLinkType() {
			limitTimeAdUpdateDetail.SetLimitLinkType(CommonConstant.ZERO)
		}
		if nil == limitTimeAdUpdateDetail.GetId() {
			var operationLimitTimeAdDetil OperationLimitTimeAdDetil = NewOperationLimitTimeAdDetil()
			BeanUtils.CopyProperties(limitTimeAdUpdateDetail, operationLimitTimeAdDetil)
			operationLimitTimeAdDetil.SetParentId(param.GetId())
			operationLimitTimeAdDetil.SetUpdatedBy(userContext.GetUser().GetUserName())
			operationLimitTimeAdDetil.SetCreatedBy(userContext.GetUser().GetUserName())
			operationLimitTimeAdDetil.SetLimitActivityId(CommonConstant.DEFAULT_LONG)
			operationLimitTimeAdDetailMapper.InsertOperationLimitTimeDetailInfo(operationLimitTimeAdDetil)
		}
	}
}
func (this *OperationLimitTimeServiceImpl) UpdateHeaderLimitTime(Param LimitTimeUpdateDto) {
	var operationLimitTimeAdUpdate OperationLimitTimeAd = NewOperationLimitTimeAd()
	BeanUtils.CopyProperties(param, operationLimitTimeAdUpdate)
	operationLimitTimeAdUpdate.SetUpdatedBy(userContext.GetUser().GetUserName())
	operationLimitTimeAdUpdate.SetEquipmentType(CommonConstant.DEFAULT_NULL)
	operationLimitTimeAdUpdate.SetStationLinkType(CommonConstant.ZERO)
	operationLimitTimeAdUpdate.SetSportLinkType(CommonConstant.ZERO)
	operationLimitTimeAdUpdate.SetStationLinkUrl(CommonConstant.DEFAULT_NULL)
	operationLimitTimeAdUpdate.SetSportLinkUrl(CommonConstant.DEFAULT_NULL)
	operationLimitTimeAdUpdate.SetStationActivityId(CommonConstant.DEFAULT_LONG)
	operationLimitTimeAdUpdate.SetActivitySportId(CommonConstant.DEFAULT_LONG)
	operationLimitTimeAdMapper.UpdateOperationLimitTimeForId(operationLimitTimeAdUpdate)
}
func (this *OperationLimitTimeServiceImpl) ConvertData(OperationLimitTimeAdList []OperationLimitTimeAd) (Result []LimitTimeAdVo) {
	var operationStationAdList []LimitTimeAdVo = make([]LimitTimeAdVo, 0)
	for _, operationLimitTimeAd := range operationLimitTimeAdList {
		var limitTimeAdVo LimitTimeAdVo = NewLimitTimeAdVo()
		var equipmentType string = operationLimitTimeAd.GetEquipmentType()
		if StringUtils.IsEmpty(equipmentType) {
			limitTimeAdVo = this.GetNewLimitTimeAdInfo(operationLimitTimeAd)
		}
		limitTimeAdVo.SetSortStatus(operationLimitTimeAd.GetSortStatus())
		limitTimeAdVo.SetSid(XS + operationLimitTimeAd.GetId())
		operationStationAdList.Add(limitTimeAdVo)
	}
	return operationStationAdList
}
func (this *OperationLimitTimeServiceImpl) GetNewLimitTimeAdInfo(OperationStationAd OperationLimitTimeAd) (Result LimitTimeAdVo) {
	var limitTimeAdVo LimitTimeAdVo = NewLimitTimeAdVo()
	BeanUtils.CopyProperties(operationStationAd, limitTimeAdVo)
	var list []int64 = make([]int64, 0)
	list.Add(operationStationAd.GetId())
	var limitTimeAdDetailList []OperationLimitTimeAdDetil = operationLimitTimeAdDetailMapper.QueryOperationLimitTimeDetailList(list)
	if !CollectionUtils.IsEmpty(limitTimeAdDetailList) {
		var details []LimitTimeAdDetailVo = make([]LimitTimeAdDetailVo, 0)
		for _, operationLimitTimeAdDetil := range limitTimeAdDetailList {
			var LimitTimeAdDetailVo LimitTimeAdDetailVo = NewLimitTimeAdDetailVo()
			LimitTimeAdDetailVo.SetParentId(operationStationAd.GetId())
			BeanUtils.CopyProperties(operationLimitTimeAdDetil, LimitTimeAdDetailVo)
			details.Add(LimitTimeAdDetailVo)
		}
		limitTimeAdVo.SetDetails(details)
	}
	return limitTimeAdVo
}
func (this *OperationLimitTimeServiceImpl) GetOldLimitTimeAdInfo(OperationLimitTimeAd OperationLimitTimeAd) (Result LimitTimeAdVo) {
	var limitTimeAdVo LimitTimeAdVo = NewLimitTimeAdVo()
	BeanUtils.CopyProperties(operationLimitTimeAd, limitTimeAdVo)
	var details []LimitTimeAdDetailVo = make([]LimitTimeAdDetailVo, 0)
	var equipmentType string = operationLimitTimeAd.GetEquipmentType()
	var equipmentTypeArry []string = equipmentType.Split(CommonConstant.COMMA)
	for index = 0; index < len(equipmentTypeArry); {
		var LimitTimeAdDetailVo LimitTimeAdDetailVo = NewLimitTimeAdDetailVo()
		LimitTimeAdDetailVo.SetParentId(operationLimitTimeAd.GetId())
		var equipment string
		if CommonConstant.DEFAULT_ONE.Equals(equipment) {
			LimitTimeAdDetailVo.SetEquipmentType(equipment)
			LimitTimeAdDetailVo.SetLimitAdImgUrl(operationLimitTimeAd.GetStationAdImgUrl())
			LimitTimeAdDetailVo.SetLimitLinkType(operationLimitTimeAd.GetStationLinkType())
			LimitTimeAdDetailVo.SetLimitLinkUrl(operationLimitTimeAd.GetStationLinkUrl())
		}
		if CommonConstant.DEFAULT_TWO.Equals(equipment) {
			LimitTimeAdDetailVo.SetEquipmentType(equipment)
			LimitTimeAdDetailVo.SetLimitAdImgUrl(operationLimitTimeAd.GetSportAdImgUrl())
			LimitTimeAdDetailVo.SetLimitLinkType(operationLimitTimeAd.GetSportLinkType())
			LimitTimeAdDetailVo.SetLimitLinkUrl(operationLimitTimeAd.GetSportLinkUrl())
		}
		details.Add(LimitTimeAdDetailVo)
	}
	limitTimeAdVo.SetDetails(details)
	return limitTimeAdVo
}
func (this *OperationLimitTimeServiceImpl) SaveMainLimitTimeData(Param LimitTimeAdAddDto) (Result int64) {
	var operationLimitTimeAd OperationLimitTimeAd = NewOperationLimitTimeAd()
	BeanUtils.CopyProperties(param, operationLimitTimeAd)
	operationLimitTimeAd.SetEquipmentType(nil)
	operationLimitTimeAd.SetAdStatus(OperationConstant.ZERO)
	operationLimitTimeAd.SetUpdatedBy(userContext.GetUser().GetUserName())
	operationLimitTimeAd.SetCreatedBy(userContext.GetUser().GetUserName())
	if 0 >= operationLimitTimeAd.GetAdSort() {
		operationLimitTimeAd.SetAdSort(operationLimitTimeAdMapper.QueryStationMaxSort())
	}
	var insertFlag int64 = operationLimitTimeAdMapper.InsertOperationLimitTimeAd(operationLimitTimeAd)
	if insertFlag < 1 {
		return
	}
	return operationLimitTimeAd.GetId()
}
func (this *OperationLimitTimeServiceImpl) UpdateOtherSort(Sort int64) {
	if nil == sort {
		return
	}
	var stationAdInfo OperationLimitTimeAd = NewOperationLimitTimeAd()
	stationAdInfo.SetAdSort(sort)
	var operationStationAd OperationLimitTimeAd = operationLimitTimeAdMapper.QueryOne(stationAdInfo)
	if nil != operationStationAd {
		var sortMax int = operationLimitTimeAdMapper.QueryStationDiscontinuousSort(sort)
		if -1 == sortMax {
			operationLimitTimeAdMapper.UpdateOtherStationSort(sort, nil)
			return
		}
		operationLimitTimeAdMapper.UpdateOtherStationSort(sort, sortMax)
	}
}
func (this *OperationLimitTimeServiceImpl) SaveLimitTimeDetailInfo(HeadId int64, LimitTimeDtoList []LimitTimeAdAddDetail) (Result int) {
	for _, limitTimeAdAddDto := range limitTimeDtoList {
		var operationLimitTimeAdDetil OperationLimitTimeAdDetil = NewOperationLimitTimeAdDetil()
		operationLimitTimeAdDetil.SetParentId(headId)
		operationLimitTimeAdDetil.SetEquipmentType(limitTimeAdAddDto.GetEquipmentType())
		operationLimitTimeAdDetil.SetLimitLinkType(limitTimeAdAddDto.GetLimitLinkType())
		operationLimitTimeAdDetil.SetLimitLinkUrl(limitTimeAdAddDto.GetLimitLinkUrl())
		operationLimitTimeAdDetil.SetLimitAdImgUrl(limitTimeAdAddDto.GetLimitAdImgUrl())
		operationLimitTimeAdDetil.SetUpdatedBy(userContext.GetUser().GetUserName())
		operationLimitTimeAdDetil.SetCreatedBy(userContext.GetUser().GetUserName())
		var saveFlag int = operationLimitTimeAdDetailMapper.InsertOperationLimitTimeDetailInfo(operationLimitTimeAdDetil)
		if saveFlag < 1 {
			return
		}
	}
	return 1
}

type OperationLimitTimeServiceImpl struct {
	OperationLimitTimeAdMapper       OperationLimitTimeAdMapper
	OperationLimitTimeAdDetailMapper OperationLimitTimeAdDetailMapper
	UserContext                      UserContext
	UserMap                          map[string]int64
	CacheService                     CacheService
}
